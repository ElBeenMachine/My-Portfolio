image: docker:20

# Define the services
services:
    - docker:20-dind

# Define the variables
variables:
    DOCKER_DRIVER: overlay2

    PROJECT_NAME: my-portfolio
    IMAGE_NAME: $AZURECR_HOST/$PROJECT_NAME
    CACHE_IMAGE_NAME: $IMAGE_NAME:cache

# Define the stages
stages:
    - prepare
    - build
    - deploy

# Prepare the job
prepare:
    stage: prepare
    image: node:alpine
    script:
        - export TAG=$(node -p "require('./package.json').version")
        - echo "TAG=$TAG" >> variables.env
    before_script: []
    services: []
    artifacts:
        reports:
            dotenv: variables.env

# Build the image for AMD64 architecture
build:
    stage: build
    needs:
        - job: prepare
          artifacts: true
    script:
        - echo "$AZURECR_PASSWORD" | docker login $AZURECR_HOST -u $AZURECR_USER --password-stdin
        - docker buildx create --use
        - docker buildx build --platform=linux/amd64,linux/arm64/v8 --tag "$IMAGE_NAME:latest" --tag "$IMAGE_NAME:$TAG" --build-arg DASHBOARD_URL="https://dash.beenhamow.co.uk" --build-arg ANALYTICS_ID="G-NCDDJ1GR78" --push .
    tags:
        - prod

# Deploy the image to local kubernetes cluster
deploy:
    stage: deploy
    image: cylab/kubectl
    # needs:
    # - job: build
    before_script:
        # Load the base64 encoded kubeconfig
        - echo "$KUBECONFIG_B64" | base64 -d > kubeconfig
        - export KUBECONFIG=kubeconfig
        - cat kubeconfig
    script:
        # Deploy the image to the local kubernetes cluster
        - kubectl set image deployment/my-portfolio my-portfolio=$IMAGE_NAME:$TAG
    tags:
        - prod
